@startuml Project
class Supplier {
  -{static} int currentId
  -readonly int id
  -string nip
  -string name
  -string country
  -readonly List<Product> products
  ----
  + void AddProduct(Product product)
  + void RemoveProduct(Product product)
  + void Sort()
  + {static} bool ValidateNip(string nip, Sumation sum)
  + {static} int SumNip(string nip)
  + override string ToString()
}

class Company {
  -string name
  -string nip
  ----
  + override string ToString()
}

class PrivateCustomer {
  -string firstName
  -string lastName
  ----
  + override string ToString()
}

abstract Customer {
  -{static} int currentId
  -readonly int id
  -string country
  -string city
  -string street
  -string zipCode
  -string phoneNumber
  -string email
  -string password
  -List<Order> orders
  ----
  + void AddOrder(Order order)
  + void RemoveOrder(Order order)
}

class Order {
  -{static} int currentId
  -readonly int id
  -bool status
  -DateTime deliveryDate
  -readonly List<CartItem> cart
  ----
  + void Add(Product product, int amount)
  + void Delete(CartItem product)
  + decimal CalculateOrderCost()
  + decimal CalculateFee()
  + decimal CalculateShippingCost()
  + decimal CalculateTotalCost()
  + override string ToString()
}

abstract Product {
  -{static} int currentId
  -readonly int id
  -string name
  -string description
  -decimal discount
  -decimal price
  -int amount
  -readonly Dictionary<string, string> technicalInfo
  -readonly List<Item> items
  ----
  + decimal GetTotalPrice()
  + int GetCount()
  + void AddItem(Item item)
  + void RemoveItem(Item item)
  + void AddTechnicalInfo(string key, string value)
  + void EditTechnicalInfo(string key, string value)
  + void DeleteTechnicalInfo(string key)
  + override string ToString()
  + override bool Equals (object? obj)
  + override int GetHashCode()
}

class Item {
  - readonly string serialNumber
  - readonly DateTime dateOfArrival
  ----
  + override string ToString()
  + override bool Equals (object? obj)
  + override int GetHashCode()
}

class Store {
  - string name
  - readonly List<Supplier> suppliers
  - readonly List<Customer> customers
  ----
  + void AddSupplier(Supplier supplier)
  + void RemoveSupplier(Supplier supplier)
  + void AddCustomer(Customer customer)
  + void RemoveCustomer(Customer customer) 
  + List<Order> GetAllOrders()
  + List<Product> GetAllProducts()
  + void GetCustomer(Customer customer)
  + void Serialize (string fname)
  + {static} Store Deserialize (string fname)
  + override string ToString()
}

enum HardwareType {
  GPU,
  CPU,
  RAM,
  Motherboard,
  PowerSupply,
  Drive,
  Other
}

enum AccessoryType {
  Headphones,
  Microphone,
  Mouse,
  Keyboard,
  Screen,
  Cable,
  Other
}

enum Architecture {
  Bit32,
  Bit64
}

class Hardware {
  -double weight
  -double length
  -double height
  -double width
  -HardwareType type
  ---- 
  + override string ToString()
}

class Software {
  -string version
  -TimeSpan license
  -Architecture architecture
  ----
  + override string ToString()
}

class Accessory {
  -double weight
  -AccessoryType type
  ----
  + override string ToString()
}

interface ICloneable {
  + object Clone()
}

interface IComparable {
  + int CompareTo(object? other)
}

interface IEquatable {
  + bool Equals (object? other)
}

IEquatable <|-[dashed]- Item : "<Item>"
IComparable <|-[dashed]- Product : "<Product>"
IEquatable <|-[dashed]- Product : "<Product>"
abstract Product implements ICloneable
HardwareType <-- Hardware
AccessoryType <-- Accessory
Architecture <-- Software
Product <|-- Accessory
Product <|-- Software
Product <|-- Hardware
Customer	<|-- Company
Customer	<|-- PrivateCustomer
Supplier "0..*" <-- "1" Store
Customer "0..*" <-- "1" Store
Product "0..*" <-- "1" Order
Product "0..*" <-- "1" Supplier
Order "0..*" <-- "1" Customer
Item "0..*" <-- "1" Product
@enduml